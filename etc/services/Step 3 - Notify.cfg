{
    "auto_start": false,
    "execution": [
        {
            "name": "GetAcceleration",
            "receivers": {
                "__default_terminal_value": []
            }
        }
    ],
    "log_level": "NOTSET",
    "mappings": [],
    "name": "Step 3 - Notify",
    "sys_metadata": "{\"DebounceLarge\":{\"locX\":216.72097778320312,\"locY\":528.5958862304688},\"GetAcceleration\":{\"locX\":384.52251439044164,\"locY\":172.68534875884657},\"d29b0693-de28-5b3e-9753-65b464106540\":[{\"position\":0,\"target\":null,\"left\":0,\"top\":0,\"width\":800,\"align\":\"center\",\"content\":\"###Service Overview\\nNow let\u2019s build a nio service from scratch. Don\u2019t worry, we\u2019ll help you through each step of the process. We\u2019re going to build a service that includes two g-force thresholds and event-based notifications to the UI and/or external messaging services.\\n\"},{\"position\":0,\"target\":null,\"left\":900,\"top\":100,\"width\":600,\"align\":\"left\",\"content\":\"####Service Building Instructions\\nThe numbered steps below outlines how to create, configure, and connect new blocks for the service. Let\u2019s start with the subscriber block which is already on the canvas... \\n\\n#####Step 1\\n**Configure Subscriber:** Services perform actions on signals, therefore, we need a signal source for our service. Let\u2019s subscribe to signals being published at the topic created in the last service. **Configure the topic of the _GetAcceleration_ block:**\\n\\n+  **1.** Block Name: GetAcceleration -- Topic: `mobiledemo.accel`\\n\\n#####Step 2\\n**Add Filter (x2):** We want to create two different thresholds to detect when you shake your phone. We can do this by adding two separate filter blocks from the Block Library on the right: one for big shakes & one for small shakes. **Create the blocks as follows:**\\n  \\n+ **1.**  Block Name: _IsBigShake_ --  Add Filter Condition: `{{ $accel > 8 }}`\\n+ **2.** Block Name: _IsSmallShake_ --  Add Filter Condition: `{{ $accel > 3 }}`\\n\\n#####Step 3\\n**Functions Explained:** The goal of these two blocks is to filter the acceleration data, stored in the value `accel`, using thresholds for BIG and small shakes. We used 8 g\u2019s for a big shake and 3 g\u2019s for a small shake.\\n\\n#####Step 4\\n**Route Signals:** We want all of the data coming from the _GetAcceleration_ block flowing into the _IsBigShake_ block, so **connect the output of the _GetAcceleration_ block with the input of the _IsBigShake_ block.**\\n\\n#####Step 5\\n**Route Signals:** If the value of `accel` is not a big shake, then the Filter block will notify a signal out of the `False` terminal. We can then check to see if that signal is a small shake. **Drag the output of the False terminal to the input terminal of the _IsSmallShake_ block.**\\n\\n#####Step 6\\n**Add Debounce:** We are sampling the acceleration and calculating the number of g\u2019s at a high rate. We can a use a debounce block to limit the number of shake triggers to a single signal per configurable interval. **Add and configure the block as follows:**\\n\\n+ **1.** Name: _DebounceShakes_ -- Debounce Interval: 1 second\\n  \\nNote: A debounce interval of 1 second is the default, so no additional configuration is needed.\\n\\n#####Step 7\\n**Route Signals:** Connect the output of the True terminal on the _IsBigShake_ block to the input of the _DebounceShakes_ block.\\n\\n#####Step 8\\n**Add configured Debounce:** We want to publish the big and small shakes to two different topics, so we need a second debounce block. We can use a duplicate _DebounceShakes_. **Add another _DebounceShakes_ block from the \u201cconfigured\u201d tab of the Block Library.**\\n\\n#####Step 9\\n**Route Signals:** Connect the True terminal output of the _IsSmallShake_ block to the input of the new _DebounceShakes_ block.\\n\\n#####Step 10\\n**Add Publisher:** At this point, we\u2019ve created event-based signals that can only be triggered once per second. Let\u2019s do something with them by publishing them value back to the UI as \u201cnotifications.\u201d **Add two publisher blocks as follows:**\\n\\n+  **1.** Block Name: _SendBigShakesUI_ -- Topic: `mobiledemo.shakes.big`\\n+  **2.** Block Name: _SendSmallShakesUI_ -- Topic: \u2018mobiledemo.shakes.small`\\n\\n#####Step 11\\n**Route Signals:** Connect the outputs of the corresponding (i.e. big & small) debounce streams to their publisher blocks. The UI will now receive and display a big shake notification if you break the 8 g threshold, a small for 3 g\u2019s, and nothing for acceleration under 3 g\u2019s. \\n\\n#####Step 12\\n**Save & Start Your Service:** After you\u2019ve completed these steps, head back to the third desktop UI visualization. Look for the events when you shake your phone and break the threshold values!\\n\\n**Extra Credit:** With the logic established for notifications, you can also send yourself a SMS text, Slack message, and/or other messaging services via nio blocks. You will need a corresponding 3rd-party account to utilize their services. Below are light instructions for two possible nio notification blocks:\\n  \\n  * The TwilioSMS block is a great choice if you want to receive a text message:\\n    + Create a free Twilio account.\\n    + Install the nio TwilioSMS block from the \u2018available\u2019 tab of the Block Library.\\n    + Drag the TwilioSMS block onto the canvas from the nio System Designer block library.\\n    + Enter your new Twilio credentials into the block config. Your credentials can be found in the \u201cLearn & Build\u201d section of the Programmable SMS Dashboard on the Twilio website.\\n    + Enter in the message you\u2019d like to send in your SMS text.\\n    + Click accept to save the block config.\\n    + Save your service.\\n    + Stop and restart your service.  \\n        \\n      + Note: Careful not to shake your phone too much and use all of your SMS credits.\\n\\n  + Slack is another great choice for notifications. We use our Slack integration all the time at niolabs:\\n    + Create a Slack account or sign into your existing workspace. \\n    + Create a legacy token using instructions found here:\\n\\thttps://api.slack.com/custom-integrations/legacy-tokens\\n    + Retrieve the API token for the bot user.\\n    + Install the nio Slack block from the \u2018available\u2019 tab of the Block Library.\\n    + Create a new Slack block by dragging a Slack block onto  the canvas.\\n    + Configure the block with the API token, slack channel, and message.\\n    + Click accept to save the block configuration.\\n    + Save your service.\\n    + Stop and restart your service.\\n\\n\\n\"},{\"position\":0,\"target\":null,\"left\":0,\"top\":1400,\"width\":800,\"align\":\"center\",\"content\":\"####Tutorial Conclusion\\nWe hope you enjoyed building your first nio services! Admittedly, these are just abstract games to get you building in nio. But it doesn\u2019t take too much imagination (and just a few different blocks) to start turning these service concepts into valuable, real-life applications: substitute any sensor or data input for your phone\u2019s accelerometer, replace the simple IF logic of a filter with complex transformations like machine learning, and swap your notification blocks with ones that actuate hardware. The only limitation is your imagination. That\u2019s the power of nio!\\n\\n\"}],\"DebounceSmall\":{\"locX\":514.4130249023438,\"locY\":670.9960327148438}}",
    "type": "Service",
    "version": "0.1.0"
}