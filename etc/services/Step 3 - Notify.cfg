{
    "auto_start": false,
    "execution": [
        {
            "name": "GetAcceleration",
            "receivers": {
                "__default_terminal_value": []
            }
        }
    ],
    "log_level": "NOTSET",
    "mappings": [],
    "name": "Step 3 - Notify",
    "sys_metadata": "{\"DebounceLarge\":{\"locX\":216.72097778320312,\"locY\":528.5958862304688},\"GetAcceleration\":{\"locX\":135.63513583088786,\"locY\":220.71899106369733},\"d29b0693-de28-5b3e-9753-65b464106540\":[{\"position\":1,\"target\":\"GetAcceleration\",\"left\":0,\"top\":0,\"width\":500,\"align\":\"left\",\"content\":\"Configure the topic of the GetAcceleration block to `mobiledemo.accel`.\"},{\"position\":0,\"target\":null,\"left\":-200,\"top\":0,\"width\":800,\"align\":\"center\",\"content\":\"###**Service Overview** \\nNow let\u2019s build a nio service from scratch. Don\u2019t worry, we\u2019ll be helping you along each step of the process to make sure you\u2019re using the right blocks and configurations to ensure a successful build.  Let\u2019s start with the Subscriber block...\\n\"},{\"position\":0,\"target\":null,\"left\":300,\"top\":300,\"width\":500,\"align\":\"center\",\"content\":\"We want to create two different thresholds to detect when you shake your phone. We can do this by using filter blocks: one for big shakes & one for small shakes. Create two filter blocks as follows:\"},{\"position\":0,\"target\":null,\"left\":415,\"top\":425,\"width\":275,\"align\":\"left\",\"content\":\"Drag a filter block on to the canvas.  \\n\\n* **Name:** IsBigShake    \\n* **Filter Conditions:** `{{ $accel > 8 }}`\\n\\n\"},{\"position\":0,\"target\":null,\"left\":415,\"top\":525,\"width\":275,\"align\":\"left\",\"content\":\"Drag a filter block on to the canvas.  \\n\\n* **Name:** IsSmallShake    \\n* **Filter Conditions:** `{{ $accel > 3 }}`\\n\"},{\"position\":0,\"target\":null,\"left\":-700,\"top\":500,\"width\":500,\"align\":\"left\",\"content\":\"We want all of the data coming from the GetAcceleration block flowing into the IsBigShake block, so connect the output of the GetAcceleration block with the input of the IsBigShake block.\\n\\nIf the value of `accel` is not a big shake, then the Filter block will notify a signal out of the `False` terminal. We can then check to see if that signal is a small shake. Drag the output of the False terminal to the input terminal of the IsSmallShake block.\\n\"},{\"position\":0,\"target\":null,\"left\":-650,\"top\":700,\"width\":400,\"align\":\"left\",\"content\":\"The goal is debounce the signal by a second to ensure that only one signal at a time will be published to the UI. \\n\"},{\"position\":0,\"target\":null,\"left\":-600,\"top\":800,\"width\":275,\"align\":\"left\",\"content\":\"Drag a debounce block on to the canvas.  \\n\\n* **Name:** DebounceShakes    \\n* **Debounce Interval:** 1 second\\n\"},{\"position\":0,\"target\":null,\"left\":-650,\"top\":950,\"width\":400,\"align\":\"left\",\"content\":\"Connect the output of the True terminal on the IsBigShake block to the input of the DebounceShakes block.\"},{\"position\":0,\"target\":null,\"left\":-700,\"top\":1075,\"width\":500,\"align\":\"left\",\"content\":\"Since we want to publish the big and small shakes to two different topics, we\u2019re going to use a duplicate DebounceShakes block to connect to the IsSmallShake block. To do so, search the configured blocks using the block library toolbar on the right side of the screen. Click `Configured` blocks and drag the DebounceShakes block onto the screen. Connect the True terminal output of the IsSmallShake block to the input of this duplicate DebounceShakes block.\"},{\"position\":0,\"target\":null,\"left\":-100,\"top\":1100,\"width\":500,\"align\":\"left\",\"content\":\"Now that we\u2019ve filtered and debounced our data, we want to publish the value back to the UI. To do so, we\u2019ll need two publishers.\"},{\"position\":0,\"target\":null,\"left\":0,\"top\":1200,\"width\":275,\"align\":\"left\",\"content\":\"Drag a publisher block on to the canvas\\n\\n* **Name:** SendBigShakesUI\\n* **Topic:** `mobiledemo.shakes.big`\\n\"},{\"position\":0,\"target\":null,\"left\":0,\"top\":1300,\"width\":275,\"align\":\"left\",\"content\":\"Drag a publisher block on to the canvas\\n\\n* **Name:** SendSmallShakesUI\\n* **Topic:** `mobiledemo.shakes.small`\\n\\n\"},{\"position\":0,\"target\":null,\"left\":300,\"top\":1250,\"width\":500,\"align\":\"left\",\"content\":\"Connect the inputs of these two publisher blocks to their corresponding streams. The output of the DebounceShakes block should be connected to the input of SendBigShakesUI and the output of the duplicate DebounceShakes should be connected to the input of the SendSmallShakesUI block.\"},{\"position\":0,\"target\":null,\"left\":850,\"top\":1200,\"width\":600,\"align\":\"left\",\"content\":\"####Additional Notifications\\n\\nWith the logic established for notifications, you can send yourself a text, email, or Slack message. Just replace the Logger block with whatever notification type you prefer:\\nThe TwilioSMS block is a great choice if you want to receive a text message.\\n\\n* Create a free Twilio account.\\n* Drag the TwilioSMS block onto the canvas from the nio System Designer block library.\\n* Enter your new Twilio credentials into the block config.  Your credentials can be found in the \u201cLearn & Build\u201d section of the Programmable SMS Dashboard on the Twilio website.\\n* Enter in the message you\u2019d like to send in your SMS text.\\n* Click accept to save the block config.\\n* Stop and restart your service.\\n* Note: Careful not to shake your phone too much and use all of your SMS credits.\\n* For reference: https://workshops.n.io/distributed-demonstration/notifications.html\\n\\n\\nSlack is another great choice for notifications. We use our Slack integration all the time at niolabs:\\nIf you already have a slack account, then you\u2019ll need to create a bot user using instructions found here: https://api.slack.com/bot-users\\n\\n* Retrieve the API token for the bot user\\n* Install the nio Slack block\\n* Create a new slack block by dragging a Slack block onto  the canvas.\\n* Configure the block with the API token, slack channel, and message\\n* Click accept to save the block configuration\\n* Stop and restart your service\\n\\n\"},{\"position\":0,\"target\":null,\"left\":-200,\"top\":1500,\"width\":800,\"align\":\"center\",\"content\":\"Start your service and head back to the desktop UI. When you shake your phone beyond the thresholds, you\u2019ll get your notifications. You can review all three visualizations on the summary pane of the desktop UI (as long as you\u2019ve kept your services running). Feel free to go back to any of the services and tinker with the configuration to see what happens.\"},{\"position\":0,\"target\":null,\"left\":-200,\"top\":1650,\"width\":800,\"align\":\"center\",\"content\":\"\\n###Conclusion\\n\\nCongratulations! You just built your first nio services, so pop some champagne, call your parents, or whatever you normally do to celebrate because you\u2019re officially on your way to becoming a nio pro!\\n\\nAdmittedly, these are just fun, abstract games to get you building in nio. But it doesn\u2019t take too much imagination (and just a few different blocks) to start turning these service concepts into valuable, real-life applications: substitute any sensor or data input for the accelerator or gyroscope, replace the simple IF logic of a filter with complex transformations, and swap your notification block with one that actuates hardware. The only limitation is your imagination. That\u2019s the power of nio!\\n\\n\\n\"}],\"DebounceSmall\":{\"locX\":514.4130249023438,\"locY\":670.9960327148438}}",
    "type": "Service",
    "version": "0.1.0"
}